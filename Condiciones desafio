/* main.js - l√≥gica Desaf√≠o Futbolero
   - carga data.csv si existe en el sitio (fallback)
   - admin puede subir CSV, definir acumulado y cierre
   - validaci√≥n de c√≥digos, formulario din√°mico (3-10 partidos)
   - env√≠a pron√≥sticos a tu Google Apps Script endpoint (SHEET_ENDPOINT)
*/

(() => {
  // --- Elements
  const codeInput = document.getElementById('codeInput');
  const validateBtn = document.getElementById('validateBtn');
  const accessMsg = document.getElementById('accessMsg');
  const jornadaCard = document.getElementById('jornadaCard');
  const matchesContainer = document.getElementById('matchesContainer');
  const pronForm = document.getElementById('pronForm');
  const playerCodeHidden = document.getElementById('playerCodeHidden');
  const sendBtn = document.getElementById('sendBtn');
  const acumuladoDisplay = document.getElementById('acumuladoDisplay');
  const countdownDisplay = document.getElementById('countdownDisplay');
  const openSheetLink = document.getElementById('openSheetLink');

  // Admin elements
  const adminModal = document.getElementById('adminModal');
  const openAdminBtn = document.getElementById('openAdminBtn');
  const closeAdminBtn = document.getElementById('closeAdminBtn');
  const adminLoginBtn = document.getElementById('adminLoginBtn');
  const adminPassword = document.getElementById('adminPassword');
  const adminPanel = document.getElementById('adminPanel');
  const adminAuth = document.getElementById('adminAuth');
  const adminAcumulado = document.getElementById('adminAcumulado');
  const adminCierre = document.getElementById('adminCierre');
  const csvUpload = document.getElementById('csvUpload');
  const saveConfigBtn = document.getElementById('saveConfigBtn');
  const exportCodesBtn = document.getElementById('exportCodesBtn');
  const forceCloseBtn = document.getElementById('forceCloseBtn');
  const adminStats = document.getElementById('adminStats');
  const sheetUrlAdmin = document.getElementById('sheetUrlAdmin');

  // Config & state
  const ADMIN_KEY = 'admin2025';
  const STORAGE_KEY = 'df_jornada_data_v1';
  const USED_CODES_KEY = 'df_used_codes_v1';
  const SHEET_ENDPOINT = window.SHEET_ENDPOINT || '';

  let jornada = {
    acumulado: null,
    partidos: [], // [{local, visitante}]
    codigos: [],  // [{codigo, usado:false}]
    cierre: null
  };

  // utility: parse CSV file content (custom simple format)
  function parseDataCSV(text) {
    const lines = text.split(/\r?\n/).map(l=>l.trim()).filter(l=>l.length>0);
    let mode = null;
    const partidos = [];
    const codigos = [];
    let acumulado = null;
    for (let line of lines) {
      if (line.startsWith('#')) {
        const tag = line.toUpperCase();
        if (tag.includes('PARTIDOS')) mode='PARTIDOS';
        else if (tag.includes('CODIGOS')) mode='CODIGOS';
        else if (tag.includes('ACUMULADO')) mode='ACUMULADO';
        else if (tag.includes('CIERRE')) mode='CIERRE';
        else mode = null;
        continue;
      }
      if (mode==='PARTIDOS') {
        const parts = line.split(',');
        if (parts.length>=2) partidos.push({ local: parts[0].trim(), visitante: parts[1].trim() });
      } else if (mode==='CODIGOS') {
        const parts = line.split(',');
        const code = parts[0].trim();
        const usado = (parts[1] && parts[1].toLowerCase().includes('true')) ? true : false;
        codigos.push({ codigo: code, usado: usado });
      } else if (mode==='ACUMULADO') {
        acumulado = line.trim();
      } else if (mode==='CIERRE') {
        // optionally parse ISO datetime
        jornada.cierre = line.trim();
      }
    }
    return { partidos, codigos, acumulado };
  }

  // try load from localStorage
  function loadFromStorage() {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (raw) {
      try {
        jornada = JSON.parse(raw);
        return true;
      } catch(e){}
    }
    return false;
  }

  function saveToStorage() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(jornada));
  }

  // attempt to fetch data.csv from the static site (initial deploy)
  async function fetchCSVFromSite() {
    try {
      const resp = await fetch('data.csv');
      if (!resp.ok) return false;
      const text = await resp.text();
      const parsed = parseDataCSV(text);
      if (parsed.partidos.length>0 || parsed.codigos.length>0 || parsed.acumulado) {
        if (parsed.acumulado) jornada.acumulado = parsed.acumulado;
        jornada.partidos = parsed.partidos;
        jornada.codigos = parsed.codigos;
        saveToStorage();
        return true;
      }
    } catch(e){}
    return false;
  }

  // render acumulado
  function renderAcumulado() {
    if (jornada.acumulado) {
      const v = Number(String(jornada.acumulado).replace(/\D/g,''));
      acumuladoDisplay.textContent = `üèÜ Acumulado de la jornada: ${formatCOP(v)}`;
    } else {
      acumuladoDisplay.textContent = `üèÜ Acumulado de la jornada: ‚Äî`;
    }
  }

  function formatCOP(num){
    if (!num && num!==0) return '‚Äî';
    return '$' + Number(num).toLocaleString('es-CO');
  }

  // render matches form
  function renderMatches() {
    matchesContainer.innerHTML = '';
    jornada.partidos.forEach((m, i) => {
      const idx = i+1;
      const div = document.createElement('div');
      div.className='match';
      div.innerHTML = `
        <div class="team">${m.local}</div>
        <div class="score">
          <input type="number" min="0" name="p${idx}_L" placeholder="L" required />
        </div>
        <div class="vs">VS</div>
        <div class="score">
          <input type="number" min="0" name="p${idx}_V" placeholder="V" required />
        </div>
        <div class="team">${m.visitante}</div>
      `;
      matchesContainer.appendChild(div);
    });
  }

  // validate code
  function findCode(code) {
    return jornada.codigos.find(c => c.codigo.toLowerCase() === (code||'').toLowerCase());
  }

  // mark code used
  function markCodeUsed(code) {
    const c = findCode(code);
    if (c) {
      c.usado = true;
      saveToStorage();
    }
  }

  // Admin UI helpers
  function openAdminModal() { adminModal.style.display='flex'; }
  function closeAdminModal() { adminModal.style.display='none'; adminAuth.style.display='block'; adminPanel.style.display='none'; adminPassword.value=''; }

  openAdminBtn.addEventListener('click', openAdminModal);
  closeAdminBtn.addEventListener('click', closeAdminModal);

  adminLoginBtn.addEventListener('click', () => {
    if (adminPassword.value === ADMIN_KEY) {
      adminAuth.style.display='none';
      adminPanel.style.display='block';
      adminAcumulado.value = jornada.acumulado || '';
      adminCierre.value = jornada.cierre ? toDatetimeLocal(jornada.cierre) : '';
      updateAdminStats();
      sheetUrlAdmin.href = SHEET_ENDPOINT.replace('/exec',''); // helpful link to open script editor
    } else {
      alert('Clave incorrecta');
    }
  });

  // CSV upload by admin
  csvUpload.addEventListener('change', (e) => {
    const f = e.target.files[0];
    if (!f) return;
    const reader = new FileReader();
    reader.onload = (ev) => {
      try {
        const parsed = parseDataCSV(ev.target.result);
        if (parsed.partidos.length===0 || parsed.codigos.length===0) {
          alert('CSV inv√°lido. Aseg√∫rate de tener las secciones #PARTIDOS y #CODIGOS.');
          return;
        }
        jornada.partidos = parsed.partidos;
        jornada.codigos = parsed.codigos;
        if (parsed.acumulado) jornada.acumulado = parsed.acumulado;
        saveToStorage();
        renderAcumulado();
        alert('CSV cargado correctamente. No olvides "Guardar configuraci√≥n".');
        updateAdminStats();
      } catch(err){
        alert('Error leyendo CSV: ' + err.message);
      }
    };
    reader.readAsText(f, 'utf-8');
  });

  saveConfigBtn.addEventListener('click', () => {
    const acum = adminAcumulado.value.trim();
    if (acum) jornada.acumulado = acum;
    const cierreVal = adminCierre.value;
    jornada.cierre = cierreVal ? new Date(cierreVal).toISOString() : null;
    saveToStorage();
    renderAcumulado();
    alert('Configuraci√≥n guardada.');
    updateAdminStats();
  });

  exportCodesBtn.addEventListener('click', () => {
    // export current codes as CSV
    let csv = '#CODIGOS\n';
    jornada.codigos.forEach(c => {
      csv += `${c.codigo},${c.usado ? 'true' : 'false'}\n`;
    });
    downloadString(csv, 'text/csv', `codigos_desafio_${Date.now()}.csv`);
  });

  forceCloseBtn.addEventListener('click', () => {
    jornada.cierre = new Date().toISOString();
    saveToStorage();
    alert('Jornada cerrada manualmente.');
    updateAdminStats();
  });

  function updateAdminStats() {
    const totalCodes = jornada.codigos.length;
    const used = jornada.codigos.filter(c=>c.usado).length;
    adminStats.innerHTML = `
      <p class="muted">Partidos en la jornada: <strong>${jornada.partidos.length}</strong></p>
      <p class="muted">C√≥digos totales: <strong>${totalCodes}</strong> (usados: ${used})</p>
    `;
  }

  // Helper to allow admin to export a file
  function downloadString(text, type, filename) {
    const blob = new Blob([text], { type });
    const a = document.createElement('a');
    a.download = filename;
    a.href = URL.createObjectURL(blob);
    a.click();
    URL.revokeObjectURL(a.href);
  }

  // validate code button
  validateBtn.addEventListener('click', () => {
    const code = (codeInput.value||'').trim();
    if (!code) { accessMsg.textContent='Ingresa un c√≥digo.'; return; }
    const c = findCode(code);
    if (!c) { accessMsg.textContent='C√≥digo no v√°lido. Contacta al administrador.'; return; }
    if (c.usado) { accessMsg.textContent='C√≥digo ya fue usado.'; return; }
    // valid
    accessMsg.textContent = 'C√≥digo v√°lido. Completa tus pron√≥sticos abajo.';
    playerCodeHidden.value = c.codigo;
    showJornadaForm();
  });

  function showJornadaForm() {
    renderMatches();
    jornadaCard.style.display = 'block';
    window.scrollTo({ top: document.getElementById('jornadaCard').offsetTop - 20, behavior: 'smooth'});
  }

  // send form
  pronForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    sendBtn.disabled = true;
    sendBtn.textContent = 'Enviando...';
    const formData = new FormData(pronForm);
    const code = playerCodeHidden.value || codeInput.value.trim();
    // build payload: include all partido fields p1_L etc.
    const payload = { codigo: code, timestamp: new Date().toISOString() };
    jornada.partidos.forEach((m,i) => {
      const idx = i+1;
      payload[`partido${idx}_L`] = formData.get(`p${idx}_L`);
      payload[`partido${idx}_V`] = formData.get(`p${idx}_V`);
    });
    // POST to Google Apps Script endpoint
    try {
      await fetch(SHEET_ENDPOINT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      // mark code used locally
      markCodeUsed(code);
      updateAdminStats();
      pronForm.reset();
      jornadaCard.style.display='none';
      accessMsg.textContent = 'Pron√≥stico enviado con √©xito. Gracias.';
      alert('Pron√≥stico registrado. ¬°Suerte!');
    } catch (err) {
      alert('Error al enviar. Intenta de nuevo. ' + err.message);
    } finally {
      sendBtn.disabled = false;
      sendBtn.textContent = 'Enviar pron√≥stico';
    }
  });

  // countdown logic
  let countdownTimer = null;
  function startCountdown() {
    if (!jornada.cierre) { countdownDisplay.textContent = '‚è±Ô∏è Jornada: sin fecha de cierre'; return; }
    function tick(){
      const now = new Date();
      const cierre = new Date(jornada.cierre);
      const diff = cierre - now;
      if (diff <= 0) {
        countdownDisplay.textContent = '‚è±Ô∏è La jornada ha cerrado';
        // disable form
        jornadaCard.style.display = 'none';
        clearInterval(countdownTimer);
        return;
      }
      const hrs = Math.floor(diff/ (1000*60*60));
      const mins = Math.floor((diff % (1000*60*60)) / (1000*60));
      const secs = Math.floor((diff % (1000*60)) / 1000);
      countdownDisplay.textContent = `‚è±Ô∏è La jornada cierra en ${hrs}h ${mins}m ${secs}s`;
    }
    clearInterval(countdownTimer);
    tick();
    countdownTimer = setInterval(tick, 1000);
  }

  // helpers
  function toDatetimeLocal(iso) {
    try {
      const d = new Date(iso);
      const pad = n => String(n).padStart(2,'0');
      const YYYY = d.getFullYear();
      const MM = pad(d.getMonth()+1);
      const DD = pad(d.getDate());
      const hh = pad(d.getHours());
      const mm = pad(d.getMinutes());
      return `${YYYY}-${MM}-${DD}T${hh}:${mm}`;
    } catch(e){ return ''; }
  }

  // initial load sequence
  async function init() {
    // try localStorage
    const okLocal = loadFromStorage();
    if (!okLocal) {
      // try fetch site data.csv
      const okCSV = await fetchCSVFromSite();
      if (!okCSV) {
        // no data, leave jornada empty
        jornada = jornada || jornada;
        saveToStorage();
      }
    }
    renderAcumulado();
    renderMatches(); // empty if no partidos
    startCountdown();
    updateAdminStats();
    // sheet link
    openSheetLink.href = SHEET_ENDPOINT.replace('/exec',''); // helpful
    document.getElementById('openSheetLink').textContent = 'Abrir Google Apps Script / Sheet';
  }

  // small UI: if click outside modal close
  adminModal.addEventListener('click',(e)=>{ if (e.target===adminModal) closeAdminModal(); });

  init();
})();
